//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace PROJECTO.PC.TasksWS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="TasksSoap", Namespace="http://localhost/")]
    public partial class Tasks : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback LoadTodosOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadInProgressOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadForReviewOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadDoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddTodosOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditTodosOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveTodosOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveTaskOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Tasks() {
            this.Url = global::PROJECTO.PC.Properties.Settings.Default.PROJECTO_PC_TasksWS_Tasks;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event LoadTodosCompletedEventHandler LoadTodosCompleted;
        
        /// <remarks/>
        public event LoadInProgressCompletedEventHandler LoadInProgressCompleted;
        
        /// <remarks/>
        public event LoadForReviewCompletedEventHandler LoadForReviewCompleted;
        
        /// <remarks/>
        public event LoadDoneCompletedEventHandler LoadDoneCompleted;
        
        /// <remarks/>
        public event AddTodosCompletedEventHandler AddTodosCompleted;
        
        /// <remarks/>
        public event EditTodosCompletedEventHandler EditTodosCompleted;
        
        /// <remarks/>
        public event RemoveTodosCompletedEventHandler RemoveTodosCompleted;
        
        /// <remarks/>
        public event MoveTaskCompletedEventHandler MoveTaskCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/LoadTodos", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] LoadTodos(string projectID) {
            object[] results = this.Invoke("LoadTodos", new object[] {
                        projectID});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void LoadTodosAsync(string projectID) {
            this.LoadTodosAsync(projectID, null);
        }
        
        /// <remarks/>
        public void LoadTodosAsync(string projectID, object userState) {
            if ((this.LoadTodosOperationCompleted == null)) {
                this.LoadTodosOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadTodosOperationCompleted);
            }
            this.InvokeAsync("LoadTodos", new object[] {
                        projectID}, this.LoadTodosOperationCompleted, userState);
        }
        
        private void OnLoadTodosOperationCompleted(object arg) {
            if ((this.LoadTodosCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadTodosCompleted(this, new LoadTodosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/LoadInProgress", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] LoadInProgress(string projectID) {
            object[] results = this.Invoke("LoadInProgress", new object[] {
                        projectID});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void LoadInProgressAsync(string projectID) {
            this.LoadInProgressAsync(projectID, null);
        }
        
        /// <remarks/>
        public void LoadInProgressAsync(string projectID, object userState) {
            if ((this.LoadInProgressOperationCompleted == null)) {
                this.LoadInProgressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadInProgressOperationCompleted);
            }
            this.InvokeAsync("LoadInProgress", new object[] {
                        projectID}, this.LoadInProgressOperationCompleted, userState);
        }
        
        private void OnLoadInProgressOperationCompleted(object arg) {
            if ((this.LoadInProgressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadInProgressCompleted(this, new LoadInProgressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/LoadForReview", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] LoadForReview(string projectID) {
            object[] results = this.Invoke("LoadForReview", new object[] {
                        projectID});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void LoadForReviewAsync(string projectID) {
            this.LoadForReviewAsync(projectID, null);
        }
        
        /// <remarks/>
        public void LoadForReviewAsync(string projectID, object userState) {
            if ((this.LoadForReviewOperationCompleted == null)) {
                this.LoadForReviewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadForReviewOperationCompleted);
            }
            this.InvokeAsync("LoadForReview", new object[] {
                        projectID}, this.LoadForReviewOperationCompleted, userState);
        }
        
        private void OnLoadForReviewOperationCompleted(object arg) {
            if ((this.LoadForReviewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadForReviewCompleted(this, new LoadForReviewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/LoadDone", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] LoadDone(string projectID) {
            object[] results = this.Invoke("LoadDone", new object[] {
                        projectID});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void LoadDoneAsync(string projectID) {
            this.LoadDoneAsync(projectID, null);
        }
        
        /// <remarks/>
        public void LoadDoneAsync(string projectID, object userState) {
            if ((this.LoadDoneOperationCompleted == null)) {
                this.LoadDoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadDoneOperationCompleted);
            }
            this.InvokeAsync("LoadDone", new object[] {
                        projectID}, this.LoadDoneOperationCompleted, userState);
        }
        
        private void OnLoadDoneOperationCompleted(object arg) {
            if ((this.LoadDoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadDoneCompleted(this, new LoadDoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/AddTodos", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddTodos(string title, string desc, string category, string projectID) {
            object[] results = this.Invoke("AddTodos", new object[] {
                        title,
                        desc,
                        category,
                        projectID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddTodosAsync(string title, string desc, string category, string projectID) {
            this.AddTodosAsync(title, desc, category, projectID, null);
        }
        
        /// <remarks/>
        public void AddTodosAsync(string title, string desc, string category, string projectID, object userState) {
            if ((this.AddTodosOperationCompleted == null)) {
                this.AddTodosOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddTodosOperationCompleted);
            }
            this.InvokeAsync("AddTodos", new object[] {
                        title,
                        desc,
                        category,
                        projectID}, this.AddTodosOperationCompleted, userState);
        }
        
        private void OnAddTodosOperationCompleted(object arg) {
            if ((this.AddTodosCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddTodosCompleted(this, new AddTodosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/EditTodos", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EditTodos(string oldTitle, string newTitle, string newDesc, string projectID) {
            object[] results = this.Invoke("EditTodos", new object[] {
                        oldTitle,
                        newTitle,
                        newDesc,
                        projectID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EditTodosAsync(string oldTitle, string newTitle, string newDesc, string projectID) {
            this.EditTodosAsync(oldTitle, newTitle, newDesc, projectID, null);
        }
        
        /// <remarks/>
        public void EditTodosAsync(string oldTitle, string newTitle, string newDesc, string projectID, object userState) {
            if ((this.EditTodosOperationCompleted == null)) {
                this.EditTodosOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditTodosOperationCompleted);
            }
            this.InvokeAsync("EditTodos", new object[] {
                        oldTitle,
                        newTitle,
                        newDesc,
                        projectID}, this.EditTodosOperationCompleted, userState);
        }
        
        private void OnEditTodosOperationCompleted(object arg) {
            if ((this.EditTodosCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditTodosCompleted(this, new EditTodosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/RemoveTodos", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RemoveTodos(string title, string projectID) {
            object[] results = this.Invoke("RemoveTodos", new object[] {
                        title,
                        projectID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveTodosAsync(string title, string projectID) {
            this.RemoveTodosAsync(title, projectID, null);
        }
        
        /// <remarks/>
        public void RemoveTodosAsync(string title, string projectID, object userState) {
            if ((this.RemoveTodosOperationCompleted == null)) {
                this.RemoveTodosOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveTodosOperationCompleted);
            }
            this.InvokeAsync("RemoveTodos", new object[] {
                        title,
                        projectID}, this.RemoveTodosOperationCompleted, userState);
        }
        
        private void OnRemoveTodosOperationCompleted(object arg) {
            if ((this.RemoveTodosCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveTodosCompleted(this, new RemoveTodosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/MoveTask", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MoveTask(string from, string to, string taskTitle, string taskDesc, string taskCategory, string projectID) {
            object[] results = this.Invoke("MoveTask", new object[] {
                        from,
                        to,
                        taskTitle,
                        taskDesc,
                        taskCategory,
                        projectID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MoveTaskAsync(string from, string to, string taskTitle, string taskDesc, string taskCategory, string projectID) {
            this.MoveTaskAsync(from, to, taskTitle, taskDesc, taskCategory, projectID, null);
        }
        
        /// <remarks/>
        public void MoveTaskAsync(string from, string to, string taskTitle, string taskDesc, string taskCategory, string projectID, object userState) {
            if ((this.MoveTaskOperationCompleted == null)) {
                this.MoveTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveTaskOperationCompleted);
            }
            this.InvokeAsync("MoveTask", new object[] {
                        from,
                        to,
                        taskTitle,
                        taskDesc,
                        taskCategory,
                        projectID}, this.MoveTaskOperationCompleted, userState);
        }
        
        private void OnMoveTaskOperationCompleted(object arg) {
            if ((this.MoveTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveTaskCompleted(this, new MoveTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void LoadTodosCompletedEventHandler(object sender, LoadTodosCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadTodosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadTodosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void LoadInProgressCompletedEventHandler(object sender, LoadInProgressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadInProgressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadInProgressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void LoadForReviewCompletedEventHandler(object sender, LoadForReviewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadForReviewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadForReviewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void LoadDoneCompletedEventHandler(object sender, LoadDoneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadDoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadDoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void AddTodosCompletedEventHandler(object sender, AddTodosCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddTodosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddTodosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void EditTodosCompletedEventHandler(object sender, EditTodosCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EditTodosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EditTodosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void RemoveTodosCompletedEventHandler(object sender, RemoveTodosCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveTodosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveTodosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void MoveTaskCompletedEventHandler(object sender, MoveTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591