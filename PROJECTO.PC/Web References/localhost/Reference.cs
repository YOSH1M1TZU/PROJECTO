//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace PROJECTO.PC.localhost {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MainSoap", Namespace="http://localhost/")]
    public partial class Main : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback MOTDOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadProjectsOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadTodosOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddTodosOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditTodosOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveTodosOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChatMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback MaintenanceOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Main() {
            this.Url = global::PROJECTO.PC.Properties.Settings.Default.PROJECTO_PC_localhost_Main;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event MOTDCompletedEventHandler MOTDCompleted;
        
        /// <remarks/>
        public event LoginCompletedEventHandler LoginCompleted;
        
        /// <remarks/>
        public event RegisterCompletedEventHandler RegisterCompleted;
        
        /// <remarks/>
        public event LoadProjectsCompletedEventHandler LoadProjectsCompleted;
        
        /// <remarks/>
        public event LoadTodosCompletedEventHandler LoadTodosCompleted;
        
        /// <remarks/>
        public event AddTodosCompletedEventHandler AddTodosCompleted;
        
        /// <remarks/>
        public event EditTodosCompletedEventHandler EditTodosCompleted;
        
        /// <remarks/>
        public event RemoveTodosCompletedEventHandler RemoveTodosCompleted;
        
        /// <remarks/>
        public event ChatMessageCompletedEventHandler ChatMessageCompleted;
        
        /// <remarks/>
        public event MaintenanceCompletedEventHandler MaintenanceCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/MOTD", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MOTD() {
            object[] results = this.Invoke("MOTD", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MOTDAsync() {
            this.MOTDAsync(null);
        }
        
        /// <remarks/>
        public void MOTDAsync(object userState) {
            if ((this.MOTDOperationCompleted == null)) {
                this.MOTDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMOTDOperationCompleted);
            }
            this.InvokeAsync("MOTD", new object[0], this.MOTDOperationCompleted, userState);
        }
        
        private void OnMOTDOperationCompleted(object arg) {
            if ((this.MOTDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MOTDCompleted(this, new MOTDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Login", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Login(string email, string password) {
            object[] results = this.Invoke("Login", new object[] {
                        email,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoginAsync(string email, string password) {
            this.LoginAsync(email, password, null);
        }
        
        /// <remarks/>
        public void LoginAsync(string email, string password, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        email,
                        password}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginOperationCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Register", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Register(string name, string surname, string email, string password) {
            object[] results = this.Invoke("Register", new object[] {
                        name,
                        surname,
                        email,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RegisterAsync(string name, string surname, string email, string password) {
            this.RegisterAsync(name, surname, email, password, null);
        }
        
        /// <remarks/>
        public void RegisterAsync(string name, string surname, string email, string password, object userState) {
            if ((this.RegisterOperationCompleted == null)) {
                this.RegisterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterOperationCompleted);
            }
            this.InvokeAsync("Register", new object[] {
                        name,
                        surname,
                        email,
                        password}, this.RegisterOperationCompleted, userState);
        }
        
        private void OnRegisterOperationCompleted(object arg) {
            if ((this.RegisterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterCompleted(this, new RegisterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/LoadProjects", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] LoadProjects(string userID) {
            object[] results = this.Invoke("LoadProjects", new object[] {
                        userID});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void LoadProjectsAsync(string userID) {
            this.LoadProjectsAsync(userID, null);
        }
        
        /// <remarks/>
        public void LoadProjectsAsync(string userID, object userState) {
            if ((this.LoadProjectsOperationCompleted == null)) {
                this.LoadProjectsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadProjectsOperationCompleted);
            }
            this.InvokeAsync("LoadProjects", new object[] {
                        userID}, this.LoadProjectsOperationCompleted, userState);
        }
        
        private void OnLoadProjectsOperationCompleted(object arg) {
            if ((this.LoadProjectsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadProjectsCompleted(this, new LoadProjectsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/LoadTodos", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] LoadTodos(string chosenProject) {
            object[] results = this.Invoke("LoadTodos", new object[] {
                        chosenProject});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void LoadTodosAsync(string chosenProject) {
            this.LoadTodosAsync(chosenProject, null);
        }
        
        /// <remarks/>
        public void LoadTodosAsync(string chosenProject, object userState) {
            if ((this.LoadTodosOperationCompleted == null)) {
                this.LoadTodosOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadTodosOperationCompleted);
            }
            this.InvokeAsync("LoadTodos", new object[] {
                        chosenProject}, this.LoadTodosOperationCompleted, userState);
        }
        
        private void OnLoadTodosOperationCompleted(object arg) {
            if ((this.LoadTodosCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadTodosCompleted(this, new LoadTodosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/AddTodos", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddTodos(string title, string desc, string projectID) {
            object[] results = this.Invoke("AddTodos", new object[] {
                        title,
                        desc,
                        projectID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddTodosAsync(string title, string desc, string projectID) {
            this.AddTodosAsync(title, desc, projectID, null);
        }
        
        /// <remarks/>
        public void AddTodosAsync(string title, string desc, string projectID, object userState) {
            if ((this.AddTodosOperationCompleted == null)) {
                this.AddTodosOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddTodosOperationCompleted);
            }
            this.InvokeAsync("AddTodos", new object[] {
                        title,
                        desc,
                        projectID}, this.AddTodosOperationCompleted, userState);
        }
        
        private void OnAddTodosOperationCompleted(object arg) {
            if ((this.AddTodosCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddTodosCompleted(this, new AddTodosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/EditTodos", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EditTodos(string oldTitle, string newTitle, string newDesc, string projectID) {
            object[] results = this.Invoke("EditTodos", new object[] {
                        oldTitle,
                        newTitle,
                        newDesc,
                        projectID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EditTodosAsync(string oldTitle, string newTitle, string newDesc, string projectID) {
            this.EditTodosAsync(oldTitle, newTitle, newDesc, projectID, null);
        }
        
        /// <remarks/>
        public void EditTodosAsync(string oldTitle, string newTitle, string newDesc, string projectID, object userState) {
            if ((this.EditTodosOperationCompleted == null)) {
                this.EditTodosOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditTodosOperationCompleted);
            }
            this.InvokeAsync("EditTodos", new object[] {
                        oldTitle,
                        newTitle,
                        newDesc,
                        projectID}, this.EditTodosOperationCompleted, userState);
        }
        
        private void OnEditTodosOperationCompleted(object arg) {
            if ((this.EditTodosCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditTodosCompleted(this, new EditTodosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/RemoveTodos", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RemoveTodos(string title, string projectID) {
            object[] results = this.Invoke("RemoveTodos", new object[] {
                        title,
                        projectID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveTodosAsync(string title, string projectID) {
            this.RemoveTodosAsync(title, projectID, null);
        }
        
        /// <remarks/>
        public void RemoveTodosAsync(string title, string projectID, object userState) {
            if ((this.RemoveTodosOperationCompleted == null)) {
                this.RemoveTodosOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveTodosOperationCompleted);
            }
            this.InvokeAsync("RemoveTodos", new object[] {
                        title,
                        projectID}, this.RemoveTodosOperationCompleted, userState);
        }
        
        private void OnRemoveTodosOperationCompleted(object arg) {
            if ((this.RemoveTodosCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveTodosCompleted(this, new RemoveTodosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ChatMessage", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ChatMessage(string senderID, string message, string project, string team) {
            this.Invoke("ChatMessage", new object[] {
                        senderID,
                        message,
                        project,
                        team});
        }
        
        /// <remarks/>
        public void ChatMessageAsync(string senderID, string message, string project, string team) {
            this.ChatMessageAsync(senderID, message, project, team, null);
        }
        
        /// <remarks/>
        public void ChatMessageAsync(string senderID, string message, string project, string team, object userState) {
            if ((this.ChatMessageOperationCompleted == null)) {
                this.ChatMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChatMessageOperationCompleted);
            }
            this.InvokeAsync("ChatMessage", new object[] {
                        senderID,
                        message,
                        project,
                        team}, this.ChatMessageOperationCompleted, userState);
        }
        
        private void OnChatMessageOperationCompleted(object arg) {
            if ((this.ChatMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChatMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Maintenance", RequestNamespace="http://localhost/", ResponseNamespace="http://localhost/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Maintenance() {
            object[] results = this.Invoke("Maintenance", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MaintenanceAsync() {
            this.MaintenanceAsync(null);
        }
        
        /// <remarks/>
        public void MaintenanceAsync(object userState) {
            if ((this.MaintenanceOperationCompleted == null)) {
                this.MaintenanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMaintenanceOperationCompleted);
            }
            this.InvokeAsync("Maintenance", new object[0], this.MaintenanceOperationCompleted, userState);
        }
        
        private void OnMaintenanceOperationCompleted(object arg) {
            if ((this.MaintenanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MaintenanceCompleted(this, new MaintenanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void MOTDCompletedEventHandler(object sender, MOTDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MOTDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MOTDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void RegisterCompletedEventHandler(object sender, RegisterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void LoadProjectsCompletedEventHandler(object sender, LoadProjectsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadProjectsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadProjectsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void LoadTodosCompletedEventHandler(object sender, LoadTodosCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadTodosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadTodosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void AddTodosCompletedEventHandler(object sender, AddTodosCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddTodosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddTodosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void EditTodosCompletedEventHandler(object sender, EditTodosCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EditTodosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EditTodosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void RemoveTodosCompletedEventHandler(object sender, RemoveTodosCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveTodosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveTodosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void ChatMessageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void MaintenanceCompletedEventHandler(object sender, MaintenanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MaintenanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MaintenanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591